
import java.awt.Dimension;


/**
 *
 * @author natlu
 */
public class AboutFrame extends javax.swing.JFrame {
    
    /**
     * Rappresenta la dimensione minima applicabile in larghezza per il frame.
     */
    public static final int MIN_WIDTH_FRAME = 1024;
    
    /**
     * Rappresenta la dimensione minima applicabile in altezza per il frame.
     */
    public static final int MIN_HEIGHT_FRAME = 768;

    /**
     * Metodo costruttore della classe AboutFrame.
     * Al suo interno si setta la dimensione minima del frame su 1024x768.
     */
    public AboutFrame() {
        initComponents();
        this.setSize(MIN_WIDTH_FRAME, MIN_HEIGHT_FRAME);
        this.setMinimumSize(new Dimension(MIN_WIDTH_FRAME, MIN_HEIGHT_FRAME));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        informationPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        guidePanel = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        informationPanel.setLayout(new java.awt.GridLayout(3, 1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/snowflake.png"))); // NOI18N
        informationPanel.add(jLabel2);

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Programma progettato e sviluppato da Nathan Luè");
        informationPanel.add(infoLabel);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Versione 1.0");
        informationPanel.add(jLabel1);

        jTabbedPane.addTab("information", informationPanel);

        jLabel3.setText("<html>     <head>      </head>     <body>         <h1>Guida all'utilizzo del programma SnowFlake</h1>         <h2>Pagina principale</h2>         <p>La pagina principale permette di accedere alla sezione legata alle informazioni ed alla guida sull'utilizzo del software.</p>         <p>Per iniziare a creare il proprio fiocco di neve bisogna premere il pulsante a sud.</p>         <hr>         <h2>Ritaglio del triangolo</h2>¨         <p>Per iniziare a ritagliare il triangolo bisogna semplicemente premere sull'area occupata da esso.</p>        <p>Una volta creati almeno 3 punti è possibile chiudere il poligono creando un ritaglio all'interno del triangolo. Per fare ciò basta solo collegare l'ultimo punto digitato, con il primo. Semplicemente si deve premere sul punto iniziale.</p>         <p>Oppure si può premere il bottone dedicato al completamento del poligono corrente (complete current polygon).</p>         <p>Inoltre è possibile trasciare qualunque punto di un poligono generato. Per farlo semplicemente bisogna premere su un punto, trascinarlo e rilasciarlo.</p>         <p>Infine con il tasto destro è possibile eliminare qualsiasi punto di qualsiasi poligono (a patto che il numero di punti del poligono sia maggiore di 3).</p>         <br>         <p>Il Frame propone diverse funzionalità tra le quali:</p>         <ul>             <li>                 avviare la <span style=\"color: red;\">modalità preview</span> attivando il checkbox. Avviando la modalità preview si può visualizzare come il triangolo verrà tagliato. Quando la modalità è attiva non si possono creare punti ne si può rimuovere o trascinare punti esistenti.             </li>             <li>                 visualizzare la <span style=\"color: red;\">live preview</span> del fiocco di neve nella parte sinistra in basso. Esso si aggiorna in tempo reale all aggiunta, al trascinamento o all'eliminazione dei punti dei poligoni.             </li>             <li>                 <span style=\"color: red;\">salvare i punti di ritaglio</span> del triangolo in un file JSON, tramite il pulsante chiamato save points presente nel menù destro.             </li>             <li>                 <span style=\"color: red;\">caricare i punti di ritaglio</span> del triangolo da un file JSON, tramite il pulsante chiamato load points presente nel menù destro.             </li>             <li>                 <span style=\"color: red;\">completare il poligono corrente</span> creato dall'utente e non ancora concluso. Vengono automaticamente uniti l'ultimo puto ed il primo. Per farlo bisogna premere il pulsante chiamato complete current polygon nel menù destro.             </li>             <li>                 <span style=\"color: red;\">generare il fiocco di neve</span>. Per farlo bisogna premere sul pulsante generate nel menù destro. Al cliccare di questo pulsante viene aperta una nuova finestra contenente il fiocco di neve.             </li>         </ul>         <hr>         <h2>Generazione del fiocco di neve</h2>         <p>Dopo essere stati renderizzati in questa finestra è presente la generazione del fiocco di neve.</p>         <p>Le funzionalità utlizzabili con il fiocco generato sono:</p>         <ul>             <li>                 <span style=\"color: red;\">salvare il fiocco in un'immagine Png</span>. Per fare ciò bisogna premere il pulsante save image Png. infine scelgiere la directory ed il nome di salvataggio per l'immagine.             </li>             <li>                 <span style=\"color: red;\">salvare il fiocco in un'immagine Svg</span>. Per fare ciò bisogna premere il pulsante save image Svg. infine scelgiere la directory ed il nome di salvataggio per l'immagine.             </li>             <li>                 <span style=\"color: red;\">tornare alla finestra precedente</span>, premendo sul pulsante back.             </li>         </ul>     </body> </html>");
        guidePanel.setViewportView(jLabel3);

        jTabbedPane.addTab("guide", guidePanel);

        getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        (new HomeFrame()).setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AboutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AboutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AboutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AboutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AboutFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JScrollPane guidePanel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables
}
